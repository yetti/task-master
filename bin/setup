#!/usr/bin/env ruby
require "fileutils"

# path to your application root.
APP_ROOT = File.expand_path("..", __dir__)

def setup
  FileUtils.chdir APP_ROOT do
    # This script is a way to set up or update your development environment automatically.
    # This script is idempotent, so that you can run it at any time and get an expectable outcome.
    # Add necessary setup steps to this file.

    log "== Installing dependencies =="
    system! "gem install bundler --conservative"
    if RUBY_PLATFORM =~ /darwin/
      system! "bundle config set --local jobs $(sysctl -n hw.logicalcpu)"
    elsif RUBY_PLATFORM =~ /linux/
      system! "bundle config set --local jobs $(nproc)"
    else
      system! "bundle config set --local jobs 2"
    end
    system! "bundle config set --local retry 3"
    system("bundle check") || system!("bundle install")

    # Install JavaScript dependencies
    system("yarn check --check-files") || system!("yarn install")

    # puts "\n== Copying sample files =="
    # unless File.exist?("config/database.yml")
    #   FileUtils.cp "config/database.yml.sample", "config/database.yml"
    # end

    log "\n== Preparing database =="
    system! "bin/rails db:prepare"

    log "\n== Removing old logs and tempfiles =="
    system! "bin/rails log:clear tmp:clear"

    log "\n== Restarting application server =="
    system! "bin/rails restart"
  end
end

def help
  log "Useful commands:"
  log ""
  log "  bin/run"
  log "     # run app locally"
  log ""
  log "  LOGRAGE_IN_DEVELOPMENT=true bin/run"
  log "     # run app locally using"
  log "     # production-like logging"
  log ""
  log ""
  log "  bundle exec rubocop -A"
  log "     # lints source code"
  log ""
  log "  RAILS_ENV=test bin/ci"
  log "     # runs all tests and checks as CI would"
  log ""
  log "  RAILS_ENV=test bundle exec rspec"
  log "     # run test specs"
  log ""
  log "  RAILS_ENV=test bundle exec cucumber"
  log "     # run acceptance tests"
  log ""
  log "  bin/setup help"
  log "     # show this help"
  log ""
end

def system!(*args)
  log "Executing #{args}"
  if system(*args)
    log "#{args} succeeded"
  else
    log "#{args} failed"
    abort
  end
end

# It's helpful to know what messages came from this
# script, so we'll use log instead of `puts`
def log(message)
  puts "[ bin/setup ] #{message}"
end

if ARGV[0] == "help"
  help
else
  setup
end
